// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
Array [
  <View
    style={
      Object {
        "alignItems": "center",
        "flexDirection": "row",
        "height": 90,
        "justifyContent": "center",
        "padding": 10,
      }
    }
  >
    <Image
      source={1}
      style={
        Object {
          "height": 60,
          "width": 60,
        }
      }
    />
    <Text
      style={
        Object {
          "color": "#50055E",
          "fontSize": 60,
        }
      }
    >
      memento
    </Text>
  </View>,
  <View
    style={
      Object {
        "alignItems": "center",
        "flex": 1,
        "marginTop": 20,
      }
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "justifyContent": "space-between",
          "marginBottom": 20,
          "position": "relative",
          "width": 750,
        }
      }
    >
      <View
        style={
          Object {
            "alignItems": "center",
            "height": 60,
            "justifyContent": "center",
            "marginTop": 20,
            "width": 300,
          }
        }
      >
        <Text
          style={
            Object {
              "color": "#50055E",
              "fontSize": 40,
            }
          }
        >
          my mementos
        </Text>
      </View>
      <RCTScrollView
        data={Array []}
        disableVirtualization={false}
        getItem={[Function]}
        getItemCount={[Function]}
        horizontal={false}
        initialNumToRender={10}
        keyExtractor={[Function]}
        maxToRenderPerBatch={10}
        onContentSizeChange={[Function]}
        onEndReachedThreshold={2}
        onLayout={[Function]}
        onMomentumScrollEnd={[Function]}
        onScroll={[Function]}
        onScrollBeginDrag={[Function]}
        onScrollEndDrag={[Function]}
        removeClippedSubviews={false}
        renderItem={[Function]}
        scrollEventThrottle={50}
        stickyHeaderIndices={Array []}
        updateCellsBatchingPeriod={50}
        viewabilityConfigCallbackPairs={Array []}
        windowSize={21}
      >
        <View />
      </RCTScrollView>
    </View>
  </View>,
  <View
    style={
      Object {
        "alignItems": "center",
        "flexDirection": "row",
        "height": 60,
        "justifyContent": "space-between",
        "position": "absolute",
        "top": 80,
        "width": 750,
      }
    }
  >
    <View
      accessibilityRole="button"
      accessibilityState={Object {}}
      accessible={true}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Array [
            Object {},
          ]
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "#007AFF",
                "fontSize": 18,
                "margin": 8,
                "textAlign": "center",
              },
              Object {
                "color": "#50055E",
              },
            ]
          }
        >
          Create memento
        </Text>
      </View>
    </View>
    <View
      accessibilityRole="button"
      accessibilityState={Object {}}
      accessible={true}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Array [
            Object {},
          ]
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "#007AFF",
                "fontSize": 18,
                "margin": 8,
                "textAlign": "center",
              },
              Object {
                "color": "#50055E",
              },
            ]
          }
        >
          Sign Out
        </Text>
      </View>
    </View>
  </View>,
]
`;

exports[`renders correctly: Home-test.js.snap 1`] = `
Array [
  <View
    style={
      Object {
        "alignItems": "center",
        "flexDirection": "row",
        "height": 90,
        "justifyContent": "center",
        "padding": 10,
      }
    }
  >
    <Image
      source={1}
      style={
        Object {
          "height": 60,
          "width": 60,
        }
      }
    />
    <Text
      style={
        Object {
          "color": "#50055E",
          "fontSize": 60,
        }
      }
    >
      memento
    </Text>
  </View>,
  <View
    style={
      Object {
        "alignItems": "center",
        "flex": 1,
        "marginTop": 20,
      }
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "justifyContent": "space-between",
          "marginBottom": 20,
          "position": "relative",
          "width": 750,
        }
      }
    >
      <View
        style={
          Object {
            "alignItems": "center",
            "height": 60,
            "justifyContent": "center",
            "marginTop": 20,
            "width": 300,
          }
        }
      >
        <Text
          style={
            Object {
              "color": "#50055E",
              "fontSize": 40,
            }
          }
        >
          my mementos
        </Text>
      </View>
      <RCTScrollView
        data={Array []}
        disableVirtualization={false}
        getItem={[Function]}
        getItemCount={[Function]}
        horizontal={false}
        initialNumToRender={10}
        keyExtractor={[Function]}
        maxToRenderPerBatch={10}
        onContentSizeChange={[Function]}
        onEndReachedThreshold={2}
        onLayout={[Function]}
        onMomentumScrollEnd={[Function]}
        onScroll={[Function]}
        onScrollBeginDrag={[Function]}
        onScrollEndDrag={[Function]}
        removeClippedSubviews={false}
        renderItem={[Function]}
        scrollEventThrottle={50}
        stickyHeaderIndices={Array []}
        updateCellsBatchingPeriod={50}
        viewabilityConfigCallbackPairs={Array []}
        windowSize={21}
      >
        <View />
      </RCTScrollView>
    </View>
  </View>,
  <View
    style={
      Object {
        "alignItems": "center",
        "flexDirection": "row",
        "height": 60,
        "justifyContent": "space-between",
        "position": "absolute",
        "top": 80,
        "width": 750,
      }
    }
  >
    <View
      accessibilityRole="button"
      accessibilityState={Object {}}
      accessible={true}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Array [
            Object {},
          ]
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "#007AFF",
                "fontSize": 18,
                "margin": 8,
                "textAlign": "center",
              },
              Object {
                "color": "#50055E",
              },
            ]
          }
        >
          Create memento
        </Text>
      </View>
    </View>
    <View
      accessibilityRole="button"
      accessibilityState={Object {}}
      accessible={true}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Array [
            Object {},
          ]
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "#007AFF",
                "fontSize": 18,
                "margin": 8,
                "textAlign": "center",
              },
              Object {
                "color": "#50055E",
              },
            ]
          }
        >
          Sign Out
        </Text>
      </View>
    </View>
  </View>,
]
`;
